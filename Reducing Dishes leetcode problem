class Solution {
public:
int solve(vector<int>& satisfaction, int index, int time){
    // base case
    if(index == satisfaction.size())
    return 0;

    int incl = satisfaction[index] * (time+1) + solve(satisfaction,index+1,time+1);
    int excl = 0 + solve(satisfaction,index+1,time);

    return max(incl,excl);
}

//solve using top - down approach
int solveMem(vector<int>& satisfaction, int index, int time, vector<vector<int> > &dp){
    // base case
    if(index == satisfaction.size())
    return 0;

    // step3
    if(dp[index][time] != -1)
    return dp[index][time];

    int incl = satisfaction[index] * (time+1) + solveMem(satisfaction,index+1,time+1,dp);
    int excl = 0 + solveMem(satisfaction,index+1,time,dp);

    dp[index][time] = max(incl,excl);
    return dp[index][time];
}


    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        int n = satisfaction.size();
    // return solve(satisfaction,0,0);  
    vector<vector<int> > dp(n+1, vector<int>(n+1,-1));
    return solveMem(satisfaction, 0, 0, dp);
    }
};
