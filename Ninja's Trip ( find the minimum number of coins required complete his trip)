int solve(int n, vector<int>& days, vector<int>& cost, int index){
   
   // solve using recursion 
    // base case
    if(index >= n){
    return 0;
    }
    // find minimun cost for tarvelling 365 days(one year)
   // 1 day pass for ninja trip
    int option1 = cost[0] + solve(n,days,cost,index+1);

    int i;
    // 7 days pass for ninja trip
    for( i=index; i<n && days[i] < days[index] + 7; i++);
    int option2 = cost[1] + solve(n,days,cost,i);

    // 30 days pass for ninja trip
    for( i=index; i<n && days[i] < days[index] + 30; i++);
    int option3 = cost[2] + solve(n,days,cost,i);

    return min(option1,min(option2,option3));
}

//solve using recursion  + momosiation (T-Down Approach)
int solveMem(int n, vector<int>& days, vector<int>& cost, int index, vector<int>& dp){
   
   // solve using recursion 
    // base case
    if(index >= n){
    return 0;
    }

    if(dp[index] != -1)
    return dp[index];
    // find minimun cost for tarvelling 365 days(one year)
   // 1 day pass for ninja trip
    int option1 = cost[0] + solveMem(n,days,cost,index+1, dp);

    int i;
    // 7 days pass for ninja trip
    for( i=index; i<n && days[i] < days[index] + 7; i++);
    int option2 = cost[1] + solveMem(n,days,cost,i,dp);

    // 30 days pass for ninja trip
    for( i=index; i<n && days[i] < days[index] + 30; i++);
    int option3 = cost[2] + solveMem(n,days,cost,i,dp);

    dp[index] = min(option1,min(option2,option3));
    return dp[index];
}
int minimumCoins(int n, vector<int> days, vector<int> cost)
{
    vector<int> dp(n+1, -1); 
    return solveMem(n, days, cost, 0, dp); // in this 0 is  initial index
}
